version: '3.8'

networks:
  ft_transcendence:
    driver: bridge

volumes:
  database_data:
  vault_data:
  avatars_data:
  frontend_dist:
  vault_token:

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/certs:/etc/nginx/certs:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - ./nginx/confs/modsecurity.conf:/etc/nginx/modsecurity/modsecurity.conf:ro
      - ./nginx/confs/main.conf:/etc/nginx/modsecurity/main.conf:ro
      - ./nginx/confs/logs:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - api-gateway
      - frontend
    networks:
      - ft_transcendence
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - SOCIAL_SERVICE_URL=${SOCIAL_SERVICE_URL}
      - PONG_SERVICE_URL=${PONG_SERVICE_URL}
      - API_PORT=${API_PORT}
      - HOST=${HOST}
      - LAN_IP=${LAN_IP}
    ports:
      - 3000:3000
    depends_on:
      - vault
      - auth-service
      - pong-service
    networks:
      - ft_transcendence
    restart: unless-stopped
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - avatars_data:/app/public/avatars
      - ./nginx/certs:/app/certs:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - FRONTEND_URL=${FRONTEND_URL}
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_SKIP_VERIFY=${VAULT_SKIP_VERIFY}
      - AUTH_PORT=${AUTH_PORT}
    volumes:
      - database_data:/app/data
      - ./services/auth-service:/app
      - avatars_data:/app/public/avatars
      - /app/node_modules
      - ./nginx/certs:/app/certs:ro
      - vault_token:/secrets:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - vault
    networks:
      - ft_transcendence
    restart: unless-stopped

  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
    environment:
      - SOCIAL_PORT=${SOCIAL_PORT}
    volumes:
      - database_data:/app/data
      - ./services/social-service:/app
      - /app/node_modules
      - ./nginx/certs:/app/certs:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - vault
      - auth-service
    networks:
      - ft_transcendence
    restart: unless-stopped

  pong-service:
    build:
      context: ./services/pong-service
      dockerfile: Dockerfile
    environment:
      - PONG_PORT=${PONG_PORT}
    volumes:
      - database_data:/app/data
      - ./services/pong-service:/app
      - /app/node_modules
      - ./nginx/certs:/app/certs:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - vault
      - auth-service
    networks:
      - ft_transcendence
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    environment:
      - NODE_ENV=${NODE_ENV}
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_dist:/app/dist
      - ./nginx/certs:/app/certs:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - ft_transcendence
    restart: unless-stopped

  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    volumes:
      - database_data:/app/data
      - ./database/init:/docker-entrypoint-initdb.d
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - ft_transcendence
    restart: unless-stopped

  # i think we'll just leave vault in dev mode since it doesn't make sense to automate the manual sceret insertoin process in prod mode with shamir keys and such
  # we could technically create another vault for transit and leave that iin dev mode, and make the main one in prod mode, but its just weird

  vault:
    build:
      context: ./vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    env_file: 
      - .env
    # ports:
    #   - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./vault/config/policies:/vault/config/policies:ro
      - ./vault/scripts:/vault/scripts:ro
      - vault_token:/app
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "--insecure", "https://localhost:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - ft_transcendence
    restart: unless-stopped
